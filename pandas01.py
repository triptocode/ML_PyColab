# -*- coding: utf-8 -*-
"""pandas01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SI3eTAQXq1oZkdAlNoRd-W5RIWR1TSI7

#Pandas 실습

##DataFrame
"""

import pandas as pd

df = pd.DataFrame([[15, '남', '영훈중'],
                   [17, '여', '성암중']],
                   index=['서준', '도연'],
                   columns=['나이', '성별', '학교'])
df

print(df.index)
print(df.columns)

df = df.rename(columns={'나이':'연령'})
df

df = df.rename(index={'서준':'학생1', '도연':'학생2'})
df

df1 = df['연령']
print(type(df1))
df1

df2 = df[['연령']]
 print(type(df2))
 df2

df

df.iloc[0, 2]

df.loc['학생1', '연령']

df.loc['학생3'] = [18, '남', '신일중']
df.loc['학생4'] = [14, '여', '풍문중']
df

df1 = df.drop(['학생3'], inplace=True, axis='rows')
print(df1)
df

df1 = df.drop(['학생2'], inplace=False, axis='rows')
print(df1)
print(df)

df['학년'] = 3
df

df['키'] = [175, 180, 185]
df

df.drop(['학년'], inplace=True, axis='columns')
df

df2 = df.drop(['키'], inplace=False, axis=1)
df2

df

df = df[['성별', '학교', '연령', '키']]
df

df.loc['학생1', '연령':'키']

df.iloc[0, 2:3]

df.iloc[:, 2:3]

exam_data = {'이름':['경석', '연주', '선희'],
             '수학':[90, 85, 70],
             '영어':[98, 88, 78],
             '음악':[90, 89, 88],
             '체육':[88, 78, 69]}
df = pd.DataFrame(exam_data)
df.set_index('이름', inplace=True)
df

df.shape

df.iloc[0, 3] = 90
df

df.loc['경석', '체육'] = 100
df

df.loc['경석', ['영어', '체육']] = 120, 130
df

df = df.transpose()
df

df = df.T
df

df.loc['선희', '음악'] = 89

ndf1 = df.set_index('음악')
ndf1

ndf1.loc[89]

ndf2 = df.set_index(['음악', '수학'])
ndf2

ndf2.loc[(89, 70)]

ndf2.iloc[1]

ndf3 = df.reset_index().set_index(['음악'])
ndf3

df

ndf = df.reindex(['경석', '연주', '선희', '덕유', '영림'])
ndf

ndf = df.reindex(['경석', '연주', '선희', '덕유', '영림'],
                 fill_value=0)
ndf

df

ndf = df.sort_index()
ndf

ndf = df.sort_index(ascending=False)
ndf

ndf = df.sort_values(by='영어', ascending=False)
ndf

student1 = pd.Series({'국어':float('NaN'), '영어':90})
student1

percentage = student1 / 100
percentage

student2 = pd.Series({'영어':50, '국어':40, '수학':80})
student2

student1 + student2

student1.add(student2, fill_value=0)

df

ndf = df + 100
ndf

ndf - df

df

df.to_csv('./df_sample.csv')

df = pd.read_csv('./df_sample.csv', index_col='이름')
df

df = pd.read_csv('./df_sample.csv')
df

df.to_csv('./df_sample1.csv', index=False)

df = pd.read_csv('./df_sample1.csv', index_col='이름')
df

df

df.to_json('./df_sample.json')

ndf1 = pd.read_json('./df_sample.json')
ndf1

df.to_excel('./df_sample.xlsx')

df2 = pd.read_excel('./df_sample.xlsx', index_col=0)
df2

tables = pd.read_html('https://www.w3schools.com/html/html_tables.asp')
print(type(tables))
print(len(tables))

tables[0]

tables[1]

df = pd.read_csv('./datasets/auto-mpg.csv',
        names=['mpg', 'cylinders', 'displacement', 'horsepower',
               'weight', 'acceleration', 'model year','origin', 'name'])
df

df.head(10)

df.tail(10)

df.shape

df.info()

df.dtypes

df.mpg.dtypes

df.describe()

df.describe(include='all').T

df.count()

unique_value = df['name'].value_counts()
print(type(unique_value))
unique_value

df.mean()

df.mpg.mean()

df.std()

df.corr()

import numpy as np

mpg_to_kpl = 0.425144
df['kpl'] = df['mpg'] * mpg_to_kpl
df.head(50)

df['kpl'] = df['kpl'].round(2)
df.head()

df.info()

df['horsepower'].unique()

df['horsepower'].replace('?', np.nan, inplace=True)
df.dropna(subset=['horsepower'], axis=0, inplace=True)
df['horsepower'] = df['horsepower'].astype('float')
df.info()

df['origin'].unique()

df['origin'].replace({1:'USA', 2:'EU', 3:'JP'}, inplace=True)
print(df['origin'].unique())
print(df['origin'].head())
print(df['origin'].value_counts())

df['origin'] = df['origin'].astype('category')
print(df['origin'].dtypes)
print(df['origin'])

df['origin'] = df['origin'].astype('str')
print(df['origin'].dtypes)
print(df['origin'])

df.info()

count, bin_dividers = np.histogram(df['horsepower'], bins=3)
print(count)
print(bin_dividers)

bin_names = ['저출력', '보통출력', '고출력']
df['hp_bin'] = pd.cut(x=df['horsepower'], bins=bin_dividers,
                      labels=bin_names, include_lowest=True)
print(df[['horsepower', 'hp_bin']].head())

df.info()

